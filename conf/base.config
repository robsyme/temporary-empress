/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Normalise/test-norm Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time   = { check_max( 160.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    // withLabel:process_single {
    //     cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(2, 'cpus') }
    //     memory = { check_max( 3.5.GB * task.attempt, 'memory'  ) }
    // }
    
    // withLabel:process_low {
    //     cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(2, 'cpus') }
    //     memory = { check_max( 3.5.GB * task.attempt, 'memory'  ) }
    // }

    // withLabel:process_medium {
    //     cpus = { task.attempt > 2 ? check_max(8, 'cpus') : check_max(4, 'cpus') }
    //     memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
    // }

    // withLabel:process_high {
    //     cpus = { task.attempt > 2 ? check_max(8, 'cpus') : check_max(4, 'cpus') }
    //     memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
    // }

    // withLabel:process_long {
    //     time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    // }

    // withLabel:process_high_memory {
    //      cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
    //      memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    // }

    // withLabel:error_ignore {
    //      errorStrategy = 'ignore'
    // }

    // withLabel:error_retry {
    //      errorStrategy = 'retry'
    //      maxRetries    = 3
    // }
    // withName:CUSTOM_DUMPSOFTWAREVERSIONS {
    //     cache = false
    // }
    // withName: 'NORMALISE' {
    // container = '396758234180.dkr.ecr.us-east-1.amazonaws.com/nf-rnaseq/normalisation:v2'
    // }
}
